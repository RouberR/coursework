{"ast":null,"code":"import CryptoJS from 'crypto-js';\nconst data = 'my1234567';\nconst iv = 'yourivare1234567';\nconst key = '99c421e41a829fb6975735525221f7e3'; // const fkey = CryptoJS.enc.Utf8.parse(key);\n\nconst fiv = CryptoJS.enc.Utf8.parse(iv); // const enc = CryptoJS.AES.encrypt(data, fkey, {\n//   iv: fiv,\n//   mode: CryptoJS.mode.CBC,\n//   padding: CryptoJS.pad.Pkcs7,\n// });\n\nexport const crypto = (message, key) => {\n  try {\n    return CryptoJS.AES.encrypt(message, CryptoJS.enc.Utf8.parse(key), {\n      iv: fiv,\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7\n    }); // return CryptoJS.AES.encrypt(message, key).toString();\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const decrypted = (cryptoMessage, key) => {\n  try {\n    const decrypted = CryptoJS.AES.decrypt(cryptoMessage, key).toString(CryptoJS.enc.Utf8);\n\n    if (!decrypted || !cryptoMessage) {\n      return 'Сообщение зашифровано, пожалуйста укажите секретный ключ!';\n    }\n\n    return decrypted;\n  } catch (err) {\n    console.log(err);\n  }\n};","map":{"version":3,"names":["CryptoJS","data","iv","key","fiv","enc","Utf8","parse","crypto","message","AES","encrypt","mode","CBC","padding","pad","Pkcs7","err","console","log","decrypted","cryptoMessage","decrypt","toString"],"sources":["/Users/fiadosenka/coursework/client/src/utils/crypto.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\n\nconst data = 'my1234567';\nconst iv = 'yourivare1234567';\nconst key = '99c421e41a829fb6975735525221f7e3';\n\n// const fkey = CryptoJS.enc.Utf8.parse(key);\nconst fiv = CryptoJS.enc.Utf8.parse(iv);\n\n// const enc = CryptoJS.AES.encrypt(data, fkey, {\n//   iv: fiv,\n//   mode: CryptoJS.mode.CBC,\n//   padding: CryptoJS.pad.Pkcs7,\n// });\n\nexport const crypto = (message, key) => {\n  try {\n    return CryptoJS.AES.encrypt(message, CryptoJS.enc.Utf8.parse(key), {\n      iv: fiv,\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7,\n    });\n    // return CryptoJS.AES.encrypt(message, key).toString();\n  } catch (err) {\n    console.log(err);\n  }\n};\n\nexport const decrypted = (cryptoMessage, key) => {\n  try {\n    const decrypted = CryptoJS.AES.decrypt(cryptoMessage, key).toString(CryptoJS.enc.Utf8);\n    if (!decrypted || !cryptoMessage) {\n      return 'Сообщение зашифровано, пожалуйста укажите секретный ключ!';\n    }\n    return decrypted;\n  } catch (err) {\n    console.log(err);\n  }\n};\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AAEA,MAAMC,IAAI,GAAG,WAAb;AACA,MAAMC,EAAE,GAAG,kBAAX;AACA,MAAMC,GAAG,GAAG,kCAAZ,C,CAEA;;AACA,MAAMC,GAAG,GAAGJ,QAAQ,CAACK,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBL,EAAxB,CAAZ,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMM,MAAM,GAAG,CAACC,OAAD,EAAUN,GAAV,KAAkB;EACtC,IAAI;IACF,OAAOH,QAAQ,CAACU,GAAT,CAAaC,OAAb,CAAqBF,OAArB,EAA8BT,QAAQ,CAACK,GAAT,CAAaC,IAAb,CAAkBC,KAAlB,CAAwBJ,GAAxB,CAA9B,EAA4D;MACjED,EAAE,EAAEE,GAD6D;MAEjEQ,IAAI,EAAEZ,QAAQ,CAACY,IAAT,CAAcC,GAF6C;MAGjEC,OAAO,EAAEd,QAAQ,CAACe,GAAT,CAAaC;IAH2C,CAA5D,CAAP,CADE,CAMF;EACD,CAPD,CAOE,OAAOC,GAAP,EAAY;IACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACD;AACF,CAXM;AAaP,OAAO,MAAMG,SAAS,GAAG,CAACC,aAAD,EAAgBlB,GAAhB,KAAwB;EAC/C,IAAI;IACF,MAAMiB,SAAS,GAAGpB,QAAQ,CAACU,GAAT,CAAaY,OAAb,CAAqBD,aAArB,EAAoClB,GAApC,EAAyCoB,QAAzC,CAAkDvB,QAAQ,CAACK,GAAT,CAAaC,IAA/D,CAAlB;;IACA,IAAI,CAACc,SAAD,IAAc,CAACC,aAAnB,EAAkC;MAChC,OAAO,2DAAP;IACD;;IACD,OAAOD,SAAP;EACD,CAND,CAME,OAAOH,GAAP,EAAY;IACZC,OAAO,CAACC,GAAR,CAAYF,GAAZ;EACD;AACF,CAVM"},"metadata":{},"sourceType":"module"}