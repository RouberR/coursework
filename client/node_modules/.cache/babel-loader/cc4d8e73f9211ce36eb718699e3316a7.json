{"ast":null,"code":"import CryptoJS from 'crypto-js';\nconst fs = createRequire('fs');\nconst util = createRequire('util');\nconst cipherData = fs.readFileSync(`${__dirname}/key.json`);\nconst {\n  key,\n  algorithm\n} = JSON.parse(cipherData);\nexport const encryptMessage = message => {\n  const iv = CryptoJS.randomBytes(8).toString('hex');\n  const cipher = CryptoJS.createCipheriv(algorithm, key, iv);\n  let encrypted = cipher.update(message, 'utf-8', 'hex');\n  encrypted += cipher.final('hex');\n  return `${encrypted}:${iv}`;\n};\n\nconst decryptMessage = message => {\n  const [encryptedMessage, iv] = message.split(':');\n  const decipher = CryptoJS.createDecipheriv(algorithm, key, iv);\n  let decrypted = decipher.update(encryptedMessage, 'hex', 'utf-8');\n  decrypted += decipher.final('utf-8');\n  return decrypted;\n};\n\nconsole.log(decryptMessage(encryptMessage('Hi! How are you?')));","map":{"version":3,"names":["CryptoJS","fs","createRequire","util","cipherData","readFileSync","__dirname","key","algorithm","JSON","parse","encryptMessage","message","iv","randomBytes","toString","cipher","createCipheriv","encrypted","update","final","decryptMessage","encryptedMessage","split","decipher","createDecipheriv","decrypted","console","log"],"sources":["/Users/fiadosenka/coursework/client/src/utils/crypto.js"],"sourcesContent":["import CryptoJS from 'crypto-js';\n\nconst fs = createRequire('fs');\nconst util = createRequire('util');\n\nconst cipherData = fs.readFileSync(`${__dirname}/key.json`);\nconst { key, algorithm } = JSON.parse(cipherData);\n\nexport const encryptMessage = (message) => {\n  const iv = CryptoJS.randomBytes(8).toString('hex');\n  const cipher = CryptoJS.createCipheriv(algorithm, key, iv);\n\n  let encrypted = cipher.update(message, 'utf-8', 'hex');\n  encrypted += cipher.final('hex');\n  return `${encrypted}:${iv}`;\n};\n\nconst decryptMessage = (message) => {\n  const [encryptedMessage, iv] = message.split(':');\n  const decipher = CryptoJS.createDecipheriv(algorithm, key, iv);\n\n  let decrypted = decipher.update(encryptedMessage, 'hex', 'utf-8');\n  decrypted += decipher.final('utf-8');\n\n  return decrypted;\n};\n\nconsole.log(decryptMessage(encryptMessage('Hi! How are you?')));\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,WAArB;AAEA,MAAMC,EAAE,GAAGC,aAAa,CAAC,IAAD,CAAxB;AACA,MAAMC,IAAI,GAAGD,aAAa,CAAC,MAAD,CAA1B;AAEA,MAAME,UAAU,GAAGH,EAAE,CAACI,YAAH,CAAiB,GAAEC,SAAU,WAA7B,CAAnB;AACA,MAAM;EAAEC,GAAF;EAAOC;AAAP,IAAqBC,IAAI,CAACC,KAAL,CAAWN,UAAX,CAA3B;AAEA,OAAO,MAAMO,cAAc,GAAIC,OAAD,IAAa;EACzC,MAAMC,EAAE,GAAGb,QAAQ,CAACc,WAAT,CAAqB,CAArB,EAAwBC,QAAxB,CAAiC,KAAjC,CAAX;EACA,MAAMC,MAAM,GAAGhB,QAAQ,CAACiB,cAAT,CAAwBT,SAAxB,EAAmCD,GAAnC,EAAwCM,EAAxC,CAAf;EAEA,IAAIK,SAAS,GAAGF,MAAM,CAACG,MAAP,CAAcP,OAAd,EAAuB,OAAvB,EAAgC,KAAhC,CAAhB;EACAM,SAAS,IAAIF,MAAM,CAACI,KAAP,CAAa,KAAb,CAAb;EACA,OAAQ,GAAEF,SAAU,IAAGL,EAAG,EAA1B;AACD,CAPM;;AASP,MAAMQ,cAAc,GAAIT,OAAD,IAAa;EAClC,MAAM,CAACU,gBAAD,EAAmBT,EAAnB,IAAyBD,OAAO,CAACW,KAAR,CAAc,GAAd,CAA/B;EACA,MAAMC,QAAQ,GAAGxB,QAAQ,CAACyB,gBAAT,CAA0BjB,SAA1B,EAAqCD,GAArC,EAA0CM,EAA1C,CAAjB;EAEA,IAAIa,SAAS,GAAGF,QAAQ,CAACL,MAAT,CAAgBG,gBAAhB,EAAkC,KAAlC,EAAyC,OAAzC,CAAhB;EACAI,SAAS,IAAIF,QAAQ,CAACJ,KAAT,CAAe,OAAf,CAAb;EAEA,OAAOM,SAAP;AACD,CARD;;AAUAC,OAAO,CAACC,GAAR,CAAYP,cAAc,CAACV,cAAc,CAAC,kBAAD,CAAf,CAA1B"},"metadata":{},"sourceType":"module"}